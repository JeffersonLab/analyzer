#!/usr/bin/env python
###### Hall A SDK SConstruct Build File #####
###### Author:	Edward Brash (brash@jlab.org) May 2017

import os
import sys
import platform
import commands
import SCons
import time
import subprocess
import configure

def rootcint(target,source,env):
	"""Executes the ROOT dictionary generator over a list of headers."""
	dictname = target[0]
	headers = ""
	cpppath = env.subst('$_CCCOMCOM')
	ccflags = env.subst('$CCFLAGS')
	rootcint = env.subst('$ROOTCINT')
	print ("Doing rootcint call now ...")
	for f in source:
		headers += str(f) + " "
	command = rootcint + " -f %s -c -pthread -fPIC %s %s" % (dictname,cpppath,headers)
	print ('RootCint Command = %s\n' % command)
	ok = os.system(command)
	return ok

baseenv = Environment(ENV = os.environ,tools=["default"],toolpath='.')

####### Check SCons version ##################
print('!!! Building the Hall A SDK with SCons requires')
print('!!! SCons version 2.1.0 or newer.')
EnsureSConsVersion(2,1,0)

configure.config(baseenv,ARGUMENTS)

####### Hall A Build Environment #############
#

halla_dir = os.getenv('ANALYZER')
if halla_dir is None:
    print ("Hall A Analyzer environment not configured !!!!")
    Exit(2)

baseenv.Append(MAIN_DIR = Dir('.').abspath)
baseenv.Append(HA_DIR = halla_dir)
baseenv.Append(HA_SRC = baseenv.subst('$HA_DIR')+'/src ') 
baseenv.Append(HA_DC = baseenv.subst('$HA_DIR')+'/hana_decode ') 

print ("Hall A Analyzer main directory = %s" % halla_dir)
print ("Hall A SDK main directory = %s" % baseenv.subst('$MAIN_DIR'))

baseenv.Append(CPPPATH = ['$MAIN_DIR','$HA_DIR','$HA_SRC','$HA_DC'])

####### ROOT Definitions ####################
baseenv.Append(ROOTCONFIG = 'root-config')
baseenv.Append(ROOTCINT = 'rootcint')

try:
	baseenv.ParseConfig('$ROOTCONFIG --cflags')
	baseenv.ParseConfig('$ROOTCONFIG --libs')
        if sys.version_info >= (2, 7):
                cmd = baseenv['ROOTCONFIG'] + " --cxx"
                baseenv.Replace(CXX = subprocess.check_output(cmd, shell=True).rstrip())
        else:
                baseenv.Replace(CXX = subprocess.Popen([baseenv['ROOTCONFIG'], '--cxx'], stdout=subprocess.PIPE).communicate()[0].rstrip())
except OSError:
	try:
		baseenv.Replace(ROOTCONFIG = baseenv['ENV']['ROOTSYS'] + '/bin/root-config')
		baseenv.Replace(ROOTCINT = baseenv['ENV']['ROOTSYS'] + '/bin/rootcint')
		baseenv.ParseConfig('$ROOTCONFIG --cflags')
		baseenv.ParseConfig('$ROOTCONFIG --libs')
                if sys.version_info >= (2, 7):
                      cmd = baseenv['ROOTCONFIG'] + " --cxx"
                      baseenv.Replace(CXX = subprocess.check_output(cmd, shell=True).rstrip())
                else:
                      baseenv.Replace(CXX = subprocess.Popen([baseenv['ROOTCONFIG'], '--cxx'], stdout=subprocess.PIPE).communicate()[0].rstrip())
	except KeyError:
       		print('!!! Cannot find ROOT.  Check if root-config is in your PATH.')
		Exit(1)

bld = Builder(action=rootcint)
baseenv.Append(BUILDERS = {'RootCint': bld})

######## Configure Section #######

Export('baseenv')

conf = Configure(baseenv)

if not conf.CheckCXX():
	print('!!! Your compiler and/or environment is not correctly configured.')
	Exit(0)

#if not conf.CheckFunc('printf'):
if not conf.CheckCC():
        print('!!! Your compiler and/or environment is not correctly configured.')
        Exit(0)

baseenv = conf.Finish()

####### Start of main SConstruct ############

SDKlib = 'User'

baseenv.Append(LIBPATH=['$HA_DIR','$MAIN_DIR','$HA_SRC','$HA_DC'])
baseenv.Prepend(LIBS=[SDKlib])
baseenv.Replace(SHLIBSUFFIX = '.so')

SConscript(dirs = ['./'],name='SConscript.py',exports='baseenv')

#######  End of SConstruct #########

# Local Variables:
# mode: python
# End:

