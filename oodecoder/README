
        Hall A C++ Event Decoder
       ==========================

  Robert Michaels,  rom@jlab.org,  updated March 29, 2000


 I.  To Set Up

     By now you've probably figured out how to untar the file,
     but in case not, do this

             tar xvf hana_decode_version.tar
     (where version = version number, e.g. 1.5)

     This makes a directory ./hana_decode_version with the code.

     I will keep the latest version on www.jlab.org/~rom   or:
     /home/rom/public_html/hana_decode_version.tar in JLab CUE

     The Makefile is shipped to work with the analyzer and just
     make the library it needs.  To compile standalone test codes
     see the notes about the "trick" in Makefile; you will need a
     libHalla.so and the headers from the main analyzer.

     * to install into ana_0.5, see section IV.  *

 II. Getting Started

     The easiest way to learn to use the decoder is to look at
     the examples of executibles.  They are documented in the 
     Makefile.  Here are some more details.

     Test Executibles:

     tstcoda  --  test of the CODA interface to a file or
                  ET client connection.

     tstio    --  simple tests of CODA I/O from a file.
                  Reads a file and does something with it; depending
                  on arguments it will printout, or filter to an output,
                  or make a fast sum of event types.

     tdecpr   --  test of decoder with self-explanatory printouts.
                  This is a 'trivial' first glimpse at what decoder does.

     tdecex   --  test of decoder, example for a use by a detector class.
                  A developer writing a detector class should imitate this.

     etclient --  test of ET connection for online data.
                  Either does a printout of data, or a fast access to test speed.

     prfact   --  standalone code to print the prescale factors and exit.  

   
    To understand how to use decoding classes, look at the 'main'
    routines corresponding to the above executibles.  They are
    tstcoda_main.C, tstio_main.C, tdecpr_main.C, tdecex_main.C, 
    etclient_main.C, and prfact_main.C.  For developers of a detector
    class, see THaGenDetTest.C which shows the proposed usage of 
    decoding for a detector class.  However, that example is dated.
    It is now preferable for users to look at Ole's guidlines and
    imitate, for example, THaScintillator class in the parent directory.

    To compile standalone codes, uncomment the line
    export STANDALONE = 1
    in the Makefile.
    This allows to compile the test executibles and builds a library
    libdc.a which is independent of the rest of the analyzer; something
    you would want to do if you ran the THaScaler class package as a
    standalone package.  To run scaler analysis you'll need to copy
    this library:  "cp libdc.a ../hana_scaler/libdc_local.a" because
    the THaScaler Makefile is looking for "libdc_local.a".


 III.  Contents of this Distribution

      Makefile  

    ---> Files that Comprise the Decoding Package ------------>
         ========================================
      
    ** "Public" Classes -- Users should be familiar with the
          public methods of these classes to build an application.
 
         THaCodaFile.C      File of CODA data -- uses evio library, but has
         THaCodaFile.h      added features like filtering, clear error messages, etc

         THaEtClient.C      Online connection to 'ET' data, provides
         THaEtClient.h      network access to data in real-time

         THaCodaData.C      Abstract class extended by THaCodaFile and 
         THaCodaData.h      THaEtClient.

         THaEvData.C        Hall A Event Data.  The decoding is done here.
         THaEvData.h        All access methods to data are here.

    ** "Private" Classes -- Users probably don't need to understand
           them, as they are used by the "public" classes.

         THaSlotData.C      Data in one crate and one slot.  Objects of this
         THaSlotData.h      type are private members of THaEvData.

         THaEpicsStack.C    Stack of EPICS data extracted from CODA data stream.
         THaEpicsStack.h    But users should use THaEvData interface.

         THaCrateMap.C      Map of DAQ crate modules.  A default private member of
         THaCrateMap.h      this type exists in THaEvData, but it can be over-ridden.

         THaFastBusWord.C   Facility to decode bits of fastbus data.
         THaFastBusWord.h

         THaHelicity.C      Beam helicity information
         THaHelicity.h 

         evio.C             These three are the good old EVIO library from DAQ group,
         evio.h             slightly modified by R. MacLeod and me to compile in C++.
         swap_util.C        (Not renamed with THa prefix because they're mainly from DAQ group.)

         THaUsrstrutils.C   String utilties (S. Wood, mods by me).  These are exactly 
         THaUsrstrutils.h   what DAQ uses to decode prescaler, etc.  Hence same results.

        <----------------- end of Decoding Package

       Test executibles -- described in section II.
     
       tstcoda_main.C
       tstio_main.C
       tdecpr_main.C
       tdecex_main.C
       etclient_main.C
       prfact_main.C

       Example of a "Generic Detector Class".  Have fun imitating this.
       (But it is better to follow Ole's instructions and imitate, for
       example, THaScintillator.)

       THaGenDetTest.C
       THaGenDetTest.h

       snippet.dat   -- a small sample of CODA format data.

 IV. How to make ana_0.XXX compatible with hana_decode_VERSION
     (e.g. XXX = 0.6 and VERSION = 1.5, or whatever it is).

  1. As usual, do this in Makefile:

     DCDIR is now hana_decode_VERSION

  2. ONLINE_ET flag in Makefile controls whether ET system
     is used.  For off-site, it should be left off.  See
     the file README_ET for more details. 












