# Makefile for "hana" (C++ Hall A Analyzer) Scaler Package
# R. Michaels, rom@jlab.org, Jan 2005  See also README 
# Version of this release
VERS=hana_scaler_4.0
#
# Goes with this version of decoder 
DCDIR=../hana_decode
#
# Test Executibles (compiled if STANDALONE=1)
# tscalfile -- Read a CODA file and print various scaler data.
# tscalasy  -- Read CODA file and crudely compute helicity correl. charge asy
# tscalhist -- Read "End-Run-History" file (generated by DAQ) and print stuff.
# tscalbad -- Check the bad data from end-of-runs.
# tscalonl -- Read data from VME online and print scaler data.
# xscaler --  xscaler++  Scaler GUI.  
# tscalntup -- Read CODA file (evtype 140), fills an ntuple w/ stuff
# tscalbbite -- For Bigbite
# tscaldtime -- Reads CODA file, checks deadtime
# tscalroc11 -- To read the ROC11 scalers (from 'physics' triggers)
# tscalroc23 -- To read the ROC23 scalers (from 'physics' triggers)
# tscalevt -- Analysis of ROC10/11 scalers. 
# tscalring -- Similar to tscalroc11, but more detailed analysis.
# tscalring23 -- Similar to tscalroc23, but more detailed analysis.
# tscalfbk -- Does feedback on Charge Asymmetry
# 
# To understand how to use scaler classes, look at the 'main'
# routines  tscalfile_main.C tscalasy_main.C tscalhist_main.C tscalonl_main.C
# etc corresponding to the above executibles. 
# See also documentation at
# http://hallaweb.jlab.org/equipment/daq/THaScaler.html

# To compile the test execs or not.  If not (default) it just makes library.
# export STANDALONE = 1

# To build a shared library, uncomment the following line
export BUILD_SHARED = 1

# To build debug code
# export DEBUG = 1

# For test executibles, must have the Decoder Library.  I will ship
# a fairly stable version and call it libdc_local.a (a local copy).  
# It's probably good enough.  If not, compile it in ../hana_decode
# by typing "make libdc.a" and copy it to $(pwd)/libdc_local.a

LIBDC=libdc_local.a

ROOTCFLAGS   := $(shell root-config --cflags)
ROOTLIBS     := $(shell root-config --libs)
ROOTGLIBS    := $(shell root-config --glibs)
ROOTBIN      := $(shell root-config --bindir)
ROOTINC      := -I$(shell root-config --incdir)
CXX          := $(shell root-config --cxx)
CC           := $(shell root-config --cc)

INCLUDES     = -I$(DCDIR) -I$(EVIO_INCDIR)

ifdef STANDALONE
ARCH          = linux
#ARCH          = macosx
#ARCH          = solarisCC5

# Only define compiler options for STANDALONE, otherwise inherit them from
# top-level Makefile

  DEFINES    = -DSTANDALONE
  ifeq ($(ARCH),solarisCC5)
    DEFINES   += -DSUNVERS 
  # Solaris CC 5.0
    ifdef DEBUG
      CXXFLG      = -g
      LDFLAGS     = -g
    else
      CXXFLG      = -O
      LDFLAGS     = -O
    endif
    CXXFLG       += -KPIC
    LD            = CC
    SOFLAGS       = -G
    endif

    ifeq ($(ARCH),linux)
    DEFINES   += -DLINUXVERS 
    # Linux with egcs (>= RedHat 5.2)
    ifdef DEBUG
      CXXFLG      = -g -O0
      LDFLAGS     = -g -O0
    else
      CXXFLG      = -O
      LDFLAGS     = -O
    endif
    CXXFLG       += -Wall -fPIC
    CXXEXTFLG     = -Woverloaded-virtual
    LD            = g++
    SOFLAGS       = -shared
  endif

  ifeq ($(ARCH),macosx)
    # EXPERIMENTAL: Mac OS X with Xcode 3.x/gcc 4.x
    DEFINES   += -DMACVERS 
    ifdef DEBUG
      CXXFLG      = -g -O0
      LDFLAGS     = -g -O0
    else
      CXXFLG      = -O
      LDFLAGS     = -O
    endif
    CXXFLG       += -Wall -fPIC
    CXXEXTFLG     = -Woverloaded-virtual
    LD            = g++
    SOFLAGS       = -shared -Wl,-undefined,dynamic_lookup
    SONAME        = -Wl,-install_name,@rpath/
  endif

  ifdef WITH_DEBUG
    DEFINES      += -DWITH_DEBUG
  endif
  DEFINES        += $(shell getconf LFS_CFLAGS)
endif

MAKEDEPEND    = g++

export OSNAME := $(shell uname)

ifeq ($(OSNAME),SunOS)

#   GLIB = -lc -lgen -lw
   GLIB = 
   SLIB = -L/opt/SUNWspro/SC4.2/lib -lsunmath
# all this needed for ET...  up to comment below
   ET_AC_FLAGS = -D_REENTRANT -D_POSIX_THREAD_SEMANTICS
   ET_CFLAGS = -mt -fast -xO5 -KPIC $(ET_AC_FLAGS) -DSUNVERS
   CODA = /adaqfs/coda/2.2
   LIBET = $(CODA)/SunOS/lib/libet.so
   ONLIBS = $(LIBET) -lposix4 -lnsl -lsocket -lresolv
   ALL_LIBS =  $(ROOTGLIBS) $(LIBDC) 
ifndef STANDALONE
   ALL_LIBS += libHallA.so
endif

endif

ifeq ($(OSNAME),Linux)

   LIBS          = 
   GLIBS         = -L/usr/X11R6/lib -lXpm -lX11
   ALL_LIBS      = $(ROOTGLIBS) $(LIBDC) 

endif

DEFINES      += $(SC_DEFINES)
CXXFLAGS      = $(CXXFLG) $(CXXEXTFLG) $(ROOTCFLAGS) $(INCLUDES) $(DEFINES)
LIBS         += $(ROOTLIBS) $(SYSLIBS)
GLIBS        += $(ROOTGLIBS) $(SYSLIBS)

#----------------------------------------------------------------------------
# The following sources comprise the package of scaler classes by R. Michaels.
# Normally leave THaScalerGui commented out (it is for xscaler)
#SRC = THaScaler.C THaScalerDB.C THaScalerGui.C 
SRC = THaScaler.C THaScalerDB.C

HEAD = $(SRC:.C=.h)
DEPS = $(SRC:.C=.d)
SCALER_OBJS = $(SRC:.C=.o) THaScalDict.o


# Test code executibles
PROGS = tscalfile tscalasy tscalhist tscalonl tscalbad
PROGS += tscalntup tscalbbite tscaldtime tscalroc11 tscalroc23 
PROGS += tscalevt tscalring tscalroc23 tscalfbk
#PROGS += xscaler

# To compile the local test codes:
# Set STANDALONE at top of makefile.  But comment it out if 
# to compile only the library libscaler.a for use with the main analyzer.

ifdef STANDALONE
  all: $(PROGS) libscaler.a
else
 ifdef BUILD_SHARED
#   all:  libscaler.so
   all:  $(LIBDIR)/libscaler.so.$(VERSION)
 else
   all:  libscaler.a
 endif
endif

# Library for main analyzer

libscaler.a:	$(SCALER_OBJS) 
	rm -f $@
	ar crs $@ $^
ifndef STANDALONE
	cp -p $@ $(LIBDIR)
endif

static:	libscaler.a

libscaler.so:	$(SCALER_OBJS) 
	rm -f $@
ifeq ($(strip $(SONAME)),)
	$(LD) $(LDFLAGS) $(SOFLAGS) -o $@ $^
else
	$(LD) $(LDFLAGS) $(SOFLAGS) $(SONAME)libscaler.so.$(SOVERSION) -o $@ $^
endif

ifndef STANDALONE
$(LIBDIR)/libscaler.so.$(VERSION): libscaler.so
	rm -f $@ $(LIBDIR)/libscaler.so.$(SOVERSION)
	cp -p $< $@
endif

tscalfile: tscalfile_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalfile_main.o $(SCALER_OBJS) $(ALL_LIBS) 

tscalasy: tscalasy_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalasy_main.o  $(SCALER_OBJS) $(ALL_LIBS) 

tscalhist: tscalhist_main.o  $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalhist_main.o  $(SCALER_OBJS) $(ALL_LIBS) 

tscalbad: tscalbad_main.o  $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalbad_main.o  $(SCALER_OBJS) $(ALL_LIBS) 

tscalonl: tscalonl_main.o  $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalonl_main.o  $(SCALER_OBJS) $(ALL_LIBS) 

xscaler: tscalgui_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalgui_main.o $(SCALER_OBJS) $(ALL_LIBS) 

tscalntup: tscalntup_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalntup_main.o $(SCALER_OBJS) $(ALL_LIBS) 

tscalbbite: tscalbbite_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalbbite_main.o $(SCALER_OBJS) $(ALL_LIBS) 

tscaldtime: tscaldtime_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC) 
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscaldtime_main.o $(SCALER_OBJS) $(ALL_LIBS)

tscalroc11: tscalroc11_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalroc11_main.o $(SCALER_OBJS) $(ALL_LIBS) 

tscalroc23: tscalroc23_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalroc23_main.o $(SCALER_OBJS) $(ALL_LIBS) 

tscalfbk: tscalfbk_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalfbk_main.o $(SCALER_OBJS) $(ALL_LIBS) 

tscalevt: tscalevt_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalevt_main.o $(SCALER_OBJS) $(ALL_LIBS) 

tscalring: tscalring_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalring_main.o $(SCALER_OBJS) $(ALL_LIBS) 

tscalring23: tscalring23_main.o $(SCALER_OBJS) $(SRC) $(HEAD) $(LIBDC)  
	rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ tscalring23_main.o $(SCALER_OBJS) $(ALL_LIBS) 

# Dictionary
THaScalDict.C: $(HEAD) haScal_LinkDef.h
	@echo "Generating Scaler Package Dictionary..."
	$(ROOTBIN)/rootcint -f THaScalDict.C -c $(ROOTINC) $(INCLUDES) $(DEFINES) $^

tarfile: clean version
	tar cvf $(VERS).tar ./hana_scaler

version:
	mkdir $(VERS) 
	cp *.C ./$(VERS) 
	cp *.h ./$(VERS) 
	cp scaler.map ./$(VERS)
	cp libdc_local.a ./$(VERS)
	cp Makefile ./$(VERS) 
	cp README ./$(VERS)
	tar cvf $(VERS).tar ./$(VERS)

clean:
	rm -f *.{a,o,os,out} core *~ THaScalDict* $(VERS).tar $(PROGS)

realclean:  clean
	rm -f *.d

install:	all
	mkdir -p $(ANALYZER)/src/hana_scaler
	cp -pu $(SRC) $(HEAD) haScal_LinkDef.h Makefile $(ANALYZER)/src/hana_scaler
	cp -pu $(HEAD) $(ANALYZER)/include
#	-cp -puvf libscaler.so $(ANALYZER)/$(PLATFORM)
###

.SUFFIXES:
.SUFFIXES: .c .cc .cpp .C .o .os .d

%.o:	%.C
	$(CXX) $(CXXFLAGS) -c $<

%.d:	%.C
	@echo Creating dependencies for $<
#	@$(SHELL) -ec '$(CXX) -MM $(CXXFLAGS) -c $< \
#		| sed '\''s/\($*\)\.o[ :]*/\1.o $@ : /g'\'' > $@; \
#		[ -s $@ ] || rm -f $@'
	@$(SHELL) -ec '$(MAKEDEPEND) -MM $(ROOTINC) $(INCLUDES) $(DEFINES) -c $< \
		| sed '\''s/\($*\)\.o[ :]*/\1.o $@ : /g'\'' > $@; \
		[ -s $@ ] || rm -f $@'

-include $(DEPS)
